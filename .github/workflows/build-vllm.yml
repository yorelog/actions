name: Build vLLM Docker Image Based on Cuda 12.4

on:
  workflow_dispatch:
    inputs:
      vllm_version:
        description: 'vLLM版本 (例如: releases/v0.10.2)'
        required: true
        type: string
        default: 'releases/v0.10.2'
      cuda_version:
        description: 'CUDA版本'
        required: false
        type: string
        default: '12.4.1'
      python_version:
        description: 'Python版本'
        required: false
        type: string
        default: '3.12'
      torch_cuda_arch_list:
        description: 'Torch CUDA架构列表'
        required: false
        type: string
        default: '8.0 8.6 8.9'
      target_namespace:
        description: '目标命名空间'
        required: false
        default: 'yoce'
        type: string

env:
  ALIYUN_REGISTRY: registry.cn-beijing.aliyuncs.com
  DOCKER_BUILDKIT: 1

jobs:
  build-vllm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Quick cleanup of large components
      run: |
        echo "🚀 快速清理已知大型组件..."
        
        echo "清理前根分区空间: $(df -h / | tail -1 | awk '{print $4}')"
        
        # 基于经验快速清理最大的组件
        echo "🗑️ 删除Swift工具链 (~2.8G)..."
        sudo rm -rf /usr/share/swift || true
        
        echo "🗑️ 删除Miniconda (~748M)..."
        sudo rm -rf /usr/share/miniconda || true
        
        echo "🗑️ 删除Azure CLI (~496M)..."
        sudo rm -rf /usr/share/az_* || true
        
        echo "🗑️ 删除Gradle (~143M)..."
        sudo rm -rf /usr/share/gradle-* || true
        
        echo "🗑️ 删除其他大型组件..."
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /usr/local/share/powershell || true
        sudo rm -rf /opt/hostedtoolcache/CodeQL || true
        sudo rm -rf /usr/local/lib/android || true
        
        echo "快速清理后根分区空间: $(df -h / | tail -1 | awk '{print $4}')"
        echo "✅ 快速清理完成，预计释放约4-5GB空间"
        
    - name: Analyze disk usage and mounts
      run: |
        echo "📊 清理后磁盘环境分析..."
        
        echo "=== 磁盘挂载信息 ==="
        df -h
        echo ""
        
        echo "=== 块设备信息 ==="
        lsblk
        echo ""
        
        echo "=== /mnt目录内容 ==="
        ls -la /mnt/ 2>/dev/null || echo "No /mnt directory"
        echo ""
        
        echo "=== 临时目录大小 ==="
        du -sh /tmp /var/tmp 2>/dev/null || true
        echo ""
        
        echo "=== Docker根目录 ==="
        docker info 2>/dev/null | grep "Docker Root Dir" || echo "Docker not running"
        echo ""
        
        echo "=== 最大的目录 ==="
        du -sh /* 2>/dev/null | sort -hr | head -10
        echo ""
        
        echo "=== /tmp磁盘空间详情 ==="
        df -h /tmp
        
    - name: Analyze remaining large components
      run: |
        echo "🔍 分析剩余大型组件（用于优化未来清理）..."
        
        echo "=== 当前最大的系统目录 ==="
        echo "分析/usr/share目录："
        du -sh /usr/share/* 2>/dev/null | sort -hr | head -10
        echo ""
        
        echo "分析/opt目录："
        du -sh /opt/* 2>/dev/null | sort -hr | head -10
        echo ""
        
        echo "分析/usr/local目录："
        du -sh /usr/local/* 2>/dev/null | sort -hr | head -10
        echo ""
        
        echo "=== 查找100MB+的大文件 ==="
        find /usr -type f -size +100M 2>/dev/null | head -10 || echo "No large files found"
        echo ""
        
        echo "=== 轻量级清理剩余缓存 ==="
        sudo apt-get clean
        sudo apt-get autoremove -y --purge
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /tmp/* /var/tmp/* || true
        sudo journalctl --vacuum-time=1d || true
        
        echo "🐳 清理Docker旧缓存(保留6小时内)..."
        docker system prune -f --filter "until=6h" || true
        docker builder prune -f --filter "until=6h" || true
        
        echo "=== 最终清理效果总结 ==="
        echo "根分区可用空间: $(df -h / | tail -1 | awk '{print $4}')"
        if df -h /mnt >/dev/null 2>&1; then
          echo "/mnt分区可用空间: $(df -h /mnt | tail -1 | awk '{print $4}')"
        fi
        
        echo "💡 建议：基于以上分析结果，可以将新发现的大组件添加到快速清理步骤中"
    
    - name: Checkout vLLM repository
      uses: actions/checkout@v4
      with:
        repository: vllm-project/vllm
        ref: ${{ inputs.vllm_version }}
        fetch-depth: 1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
    
    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ALIYUN_REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
    
    - name: Prepare build environment
      run: |
        echo "🔧 准备构建环境..."
        
        # 设置构建变量
        VLLM_VERSION="${{ inputs.vllm_version }}"
        CUDA_VERSION="${{ inputs.cuda_version }}"
        PYTHON_VERSION="${{ inputs.python_version }}"
        TORCH_CUDA_ARCH_LIST="${{ inputs.torch_cuda_arch_list }}"
        TARGET_NAMESPACE="${{ inputs.target_namespace }}"
        
        # 清理版本号中的斜杠和前缀，生成合法的镜像标签
        CLEAN_VERSION=$(echo "$VLLM_VERSION" | sed 's|releases/||g' | sed 's|/|_|g')
        IMAGE_TAG="${CLEAN_VERSION}_cu$(echo ${CUDA_VERSION} | tr -d '.')"
        TARGET_IMAGE="${{ env.ALIYUN_REGISTRY }}/${TARGET_NAMESPACE}/vllm:${IMAGE_TAG}"
        
        # 设置环境变量
        echo "VLLM_VERSION=$VLLM_VERSION" >> $GITHUB_ENV
        echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
        echo "CUDA_VERSION=$CUDA_VERSION" >> $GITHUB_ENV
        echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
        echo "TORCH_CUDA_ARCH_LIST=$TORCH_CUDA_ARCH_LIST" >> $GITHUB_ENV
        echo "TARGET_IMAGE=$TARGET_IMAGE" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
        echo "📋 构建信息:"
        echo "  vLLM版本: $VLLM_VERSION"
        echo "  清理后版本: $CLEAN_VERSION"
        echo "  CUDA版本: $CUDA_VERSION"
        echo "  基础镜像: nvidia/cuda:${CUDA_VERSION}-devel-ubuntu22.04 (统一使用22.04节省空间)"
        echo "  Python版本: $PYTHON_VERSION"
        echo "  CUDA架构列表: $TORCH_CUDA_ARCH_LIST"
        echo "  目标镜像: $TARGET_IMAGE"
    
    - name: Check disk space before build
      run: |
        echo "📊 构建前详细磁盘空间分析:"
        echo "=== 总体磁盘使用 ==="
        df -h
        echo ""
        
        echo "=== /tmp目录详情 ==="
        df -h /tmp
        du -sh /tmp/* 2>/dev/null | sort -hr | head -5 || echo "No files in /tmp"
        echo ""
        
        echo "=== Docker空间使用 ==="
        docker system df
        echo ""
        
        echo "=== 大文件目录分析 ==="
        du -sh /usr/share/* 2>/dev/null | sort -hr | head -5
        echo ""
        
        echo "=== 可用空间总结 ==="
        echo "根分区: $(df -h / | tail -1 | awk '{print $4}') 可用"
        echo "/tmp分区: $(df -h /tmp | tail -1 | awk '{print $4}') 可用"
    
    - name: Build vLLM Docker image
      run: |
        echo "🚀 开始构建vLLM Docker镜像..."
        
        
        # 基础构建参数
        BUILD_ARGS=""
        BUILD_ARGS="$BUILD_ARGS --build-arg CUDA_VERSION=$CUDA_VERSION"
        BUILD_ARGS="$BUILD_ARGS --build-arg PYTHON_VERSION=$PYTHON_VERSION"
        BUILD_ARGS="$BUILD_ARGS --build-arg torch_cuda_arch_list=\"$TORCH_CUDA_ARCH_LIST\""
        BUILD_ARGS="$BUILD_ARGS --build-arg BUILD_BASE_IMAGE=nvidia/cuda:${CUDA_VERSION}-devel-ubuntu22.04"
        BUILD_ARGS="$BUILD_ARGS --build-arg FINAL_BASE_IMAGE=nvidia/cuda:${CUDA_VERSION}-devel-ubuntu22.04"
        
        echo "🔍 构建参数详细检查:"
        echo "BUILD_ARGS: $BUILD_ARGS"
        echo "TARGET_IMAGE: $TARGET_IMAGE"
        echo "PWD: $(pwd)"
        echo "DOCKER_TMPDIR: $DOCKER_TMPDIR"
        echo "TMPDIR: $TMPDIR"
        echo ""
        
        echo "验证基础镜像参数:"
        echo "BUILD_BASE_IMAGE: nvidia/cuda:${CUDA_VERSION}-devel-ubuntu20.04"
        echo "FINAL_BASE_IMAGE: nvidia/cuda:${CUDA_VERSION}-devel-ubuntu22.04"
        echo ""
        
        echo "当前目录内容:"
        ls -la
        echo ""
        
        echo "Dockerfile存在检查:"
        ls -la docker/Dockerfile 2>/dev/null || echo "❌ Dockerfile not found!"
        if [ -f docker/Dockerfile ]; then
          echo "✅ Dockerfile found"
          echo "Dockerfile前10行:"
          head -10 docker/Dockerfile
        fi
        echo ""
        
        echo "Docker buildx版本:"
        docker buildx version
        echo ""
        
        # 执行构建
        echo "🔨 执行Docker构建..."
        
        # 构建前再次检查磁盘空间
        echo "构建开始前磁盘状态:"
        df -h / /tmp
        docker system df
        
        # 使用buildx构建，确保在vLLM仓库目录中执行
        echo "当前工作目录: $(pwd)"
        echo "确认在vLLM仓库中构建..."
        
        docker buildx build \
            $BUILD_ARGS \
            --target vllm-openai \
            --tag "$TARGET_IMAGE" \
            --file docker/Dockerfile \
            --load \
            .
        
        echo "✅ 构建完成!"
        echo "镜像: $TARGET_IMAGE"
    
    - name: Check disk space after build
      run: |
        echo "📊 构建后详细磁盘空间分析:"
        echo "=== 总体磁盘使用变化 ==="
        df -h / /mnt /tmp
        echo ""
        
        echo "=== Docker空间使用详情 ==="
        docker system df
        echo ""
        
        echo "=== 大型目录当前状态 ==="
        du -sh /var/lib/docker /mnt /tmp 2>/dev/null || true
        echo ""
        
        echo "=== 构建产生的文件 ==="
        find /mnt -name "*docker*" -type d 2>/dev/null | head -5 || true
        echo ""
        
        # 检查磁盘使用率并给出建议
        ROOT_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
        MNT_USAGE=$(df /mnt | tail -1 | awk '{print $5}' | sed 's/%//')
        
        echo "=== 磁盘使用率分析 ==="
        echo "根分区使用率: ${ROOT_USAGE}%"
        echo "/mnt分区使用率: ${MNT_USAGE}%"
        
        if [ "$ROOT_USAGE" -gt 85 ]; then
          echo "⚠️ 根分区使用率过高，执行紧急清理..."
          docker system prune -f
          docker image prune -af --filter "until=1h"
        fi
        DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
        if [ "$DISK_USAGE" -gt 85 ]; then
          echo "⚠️ 磁盘使用率超过85%，执行紧急清理..."
          docker system prune -f
          docker image prune -af --filter "until=1h"
        fi
    
    - name: Test built image
      run: |
        echo "🧪 测试构建的镜像..."
        
        # 简单的镜像测试
        echo "检查镜像是否可以正常启动..."
        docker run --rm "$TARGET_IMAGE" python -c "import vllm; print(f'vLLM version: {vllm.__version__}')" || {
          echo "❌ 镜像测试失败"
          exit 1
        }
        
        echo "✅ 镜像测试通过"
    
    - name: Push to Aliyun Registry
      run: |
        echo "📤 推送镜像到阿里云..."
        
        docker push "$TARGET_IMAGE"
        
        echo "✅ 推送完成!"
        echo "镜像地址: $TARGET_IMAGE"
    
    - name: Clean up and final report
      run: |
        echo "🧹 清理构建文件..."
        
        # 删除本地镜像释放空间
        docker rmi "$TARGET_IMAGE" || true
        
        # 清理构建缓存
        docker system prune -f
        docker builder prune -f
        
        echo "📊 最终状态报告:"
        echo "=================="
        echo "构建信息:"
        echo "  vLLM版本: $VLLM_VERSION"
        echo "  CUDA版本: $CUDA_VERSION"
        echo "  Python版本: $PYTHON_VERSION"
        echo "  镜像标签: $IMAGE_TAG"
        echo ""
        echo "镜像地址:"
        echo "  $TARGET_IMAGE"
        echo ""
        echo "使用方法:"
        echo "  docker pull $TARGET_IMAGE"
        echo ""
        echo "磁盘空间:"
        df -h /
        echo ""
        echo "构建完成时间: $(date)"