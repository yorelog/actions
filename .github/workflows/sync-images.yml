name: Sync Images to Aliyun Registry

on:
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Ê∫êÈïúÂÉè (‰æãÂ¶Ç: nvidia/cuda:12.1.1-devel-ubuntu22.04)'
        required: true
        type: string
      target_tag:
        description: 'ÁõÆÊ†áÊ†áÁ≠æ (‰æãÂ¶Ç: 12.1.1-devel-ubuntu22.04ÔºåÁïôÁ©∫Âàô‰ΩøÁî®Ê∫êÈïúÂÉèÊ†áÁ≠æ)'
        required: false
        type: string
      target_namespace:
        description: 'ÁõÆÊ†áÂëΩÂêçÁ©∫Èó¥'
        required: false
        default: 'yoce/cuda'
        type: string
  schedule:
    # ÊØèÂë®Êó•ÂáåÊô®2ÁÇπËá™Âä®ÂêåÊ≠•Â∏∏Áî®ÈïúÂÉè
    - cron: '0 2 * * 0'

env:
  ALIYUN_REGISTRY: registry.cn-beijing.aliyuncs.com

jobs:
  sync-single-image:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ALIYUN_REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
    
    - name: Parse image information
      run: |
        SOURCE_IMAGE="${{ github.event.inputs.source_image }}"
        TARGET_NAMESPACE="${{ github.event.inputs.target_namespace || 'yoce/cuda' }}"
        TARGET_TAG="${{ github.event.inputs.target_tag }}"
        
        # Â¶ÇÊûúÊ≤°ÊúâÊåáÂÆöÁõÆÊ†áÊ†áÁ≠æÔºå‰ªéÊ∫êÈïúÂÉèÊèêÂèñ
        if [[ -z "$TARGET_TAG" ]]; then
          if [[ "$SOURCE_IMAGE" == *":"* ]]; then
            TARGET_TAG="${SOURCE_IMAGE##*:}"
          else
            TARGET_TAG="latest"
          fi
        fi
        
        TARGET_IMAGE="${{ env.ALIYUN_REGISTRY }}/${TARGET_NAMESPACE}:${TARGET_TAG}"
        
        echo "SOURCE_IMAGE=$SOURCE_IMAGE" >> $GITHUB_ENV
        echo "TARGET_IMAGE=$TARGET_IMAGE" >> $GITHUB_ENV
        echo "TARGET_TAG=$TARGET_TAG" >> $GITHUB_ENV
        
        echo "üîÑ ÂêåÊ≠•ÈïúÂÉè:"
        echo "  Ê∫êÈïúÂÉè: $SOURCE_IMAGE"
        echo "  ÁõÆÊ†áÈïúÂÉè: $TARGET_IMAGE"
    
    - name: Pull source image
      run: |
        echo "üì• ÊãâÂèñÊ∫êÈïúÂÉè..."
        docker pull ${{ env.SOURCE_IMAGE }}
        
        # ÊòæÁ§∫ÈïúÂÉè‰ø°ÊÅØ
        docker inspect ${{ env.SOURCE_IMAGE }} --format='{{.RepoTags}} {{.Size}}'
    
    - name: Tag and push to Aliyun
      run: |
        echo "üè∑Ô∏è ÈáçÊñ∞Ê†áËÆ∞ÈïúÂÉè..."
        docker tag ${{ env.SOURCE_IMAGE }} ${{ env.TARGET_IMAGE }}
        
        echo "üì§ Êé®ÈÄÅÂà∞ÈòøÈáå‰∫ëÈïúÂÉè‰ªìÂ∫ì..."
        docker push ${{ env.TARGET_IMAGE }}
        
        echo "‚úÖ ÂêåÊ≠•ÂÆåÊàê!"
        echo "ÈïúÂÉèÂú∞ÂùÄ: ${{ env.TARGET_IMAGE }}"
    
    - name: Verify sync
      run: |
        echo "üîç È™åËØÅÈïúÂÉèÂêåÊ≠•..."
        docker pull ${{ env.TARGET_IMAGE }}
        
        # ÊØîËæÉÈïúÂÉèÂ§ßÂ∞èÂíåÂ±ÇÊï∞
        SOURCE_SIZE=$(docker inspect ${{ env.SOURCE_IMAGE }} --format='{{.Size}}')
        TARGET_SIZE=$(docker inspect ${{ env.TARGET_IMAGE }} --format='{{.Size}}')
        
        echo "Ê∫êÈïúÂÉèÂ§ßÂ∞è: $SOURCE_SIZE bytes"
        echo "ÁõÆÊ†áÈïúÂÉèÂ§ßÂ∞è: $TARGET_SIZE bytes"
        
        if [[ "$SOURCE_SIZE" == "$TARGET_SIZE" ]]; then
          echo "‚úÖ ÈïúÂÉèÂ§ßÂ∞èÂåπÈÖçÔºåÂêåÊ≠•ÊàêÂäü"
        else
          echo "‚ö†Ô∏è ÈïúÂÉèÂ§ßÂ∞è‰∏çÂåπÈÖçÔºåËØ∑Ê£ÄÊü•"
          exit 1
        fi

  sync-common-images:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        image:
          # CUDA Âü∫Á°ÄÈïúÂÉè
          - source: "nvidia/cuda:12.1.1-devel-ubuntu22.04"
            target: "12.1.1-devel-ubuntu22.04"
          - source: "nvidia/cuda:12.1.1-runtime-ubuntu22.04"
            target: "12.1.1-runtime-ubuntu22.04"
          - source: "nvidia/cuda:12.1.1-base-ubuntu22.04"
            target: "12.1.1-base-ubuntu22.04"
          # Python Âü∫Á°ÄÈïúÂÉè
          - source: "python:3.12-slim"
            target: "python-3.12-slim"
          - source: "python:3.11-slim"
            target: "python-3.11-slim"
          # Ubuntu Âü∫Á°ÄÈïúÂÉè
          - source: "ubuntu:22.04"
            target: "ubuntu-22.04"
          - source: "ubuntu:20.04"
            target: "ubuntu-20.04"
      fail-fast: false
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ALIYUN_REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
    
    - name: Sync ${{ matrix.image.source }}
      run: |
        SOURCE_IMAGE="${{ matrix.image.source }}"
        TARGET_IMAGE="${{ env.ALIYUN_REGISTRY }}/yoce/cuda:${{ matrix.image.target }}"
        
        echo "üîÑ ÂêåÊ≠•ÈïúÂÉè: $SOURCE_IMAGE -> $TARGET_IMAGE"
        
        # ÊãâÂèñÊ∫êÈïúÂÉè
        docker pull $SOURCE_IMAGE
        
        # ÈáçÊñ∞Ê†áËÆ∞
        docker tag $SOURCE_IMAGE $TARGET_IMAGE
        
        # Êé®ÈÄÅÂà∞ÈòøÈáå‰∫ë
        docker push $TARGET_IMAGE
        
        echo "‚úÖ $SOURCE_IMAGE ÂêåÊ≠•ÂÆåÊàê"
    
    - name: Clean up local images
      if: always()
      run: |
        echo "üßπ Ê∏ÖÁêÜÊú¨Âú∞ÈïúÂÉè..."
        docker image prune -f
        docker system df

  list-synced-images:
    needs: [sync-single-image, sync-common-images]
    if: always() && (needs.sync-single-image.result == 'success' || needs.sync-common-images.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ALIYUN_REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
    
    - name: List available images
      run: |
        echo "üìã ÈòøÈáå‰∫ëÈïúÂÉè‰ªìÂ∫ì‰∏≠ÁöÑÂèØÁî®ÈïúÂÉè:"
        echo "=================================="
        
        # Â∞ùËØïÂàóÂá∫‰∏Ä‰∫õÂ∏∏ËßÅÁöÑÈïúÂÉèÊ†áÁ≠æ
        COMMON_TAGS=(
          "12.1.1-devel-ubuntu22.04"
          "12.1.1-runtime-ubuntu22.04"
          "12.1.1-base-ubuntu22.04"
          "python-3.12-slim"
          "python-3.11-slim"
          "ubuntu-22.04"
          "ubuntu-20.04"
          "cu121-build"
          "cu121-build-prod"
        )
        
        for tag in "${COMMON_TAGS[@]}"; do
          IMAGE="${{ env.ALIYUN_REGISTRY }}/yoce/cuda:$tag"
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            SIZE=$(docker manifest inspect $IMAGE | jq -r '.config.size // 0')
            echo "‚úÖ $IMAGE (Size: $SIZE bytes)"
          else
            echo "‚ùå $IMAGE (‰∏çÂ≠òÂú®)"
          fi
        done
        
        echo ""
        echo "üîß ‰ΩøÁî®ÊñπÊ≥ï:"
        echo "docker pull ${{ env.ALIYUN_REGISTRY }}/yoce/cuda:<tag>"
