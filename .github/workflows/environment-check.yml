name: Environment Check

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'scripts/**'

jobs:
  check-environment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: cu121-builder:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test basic functionality
      run: |
        echo "Testing Docker image basic functionality..."
        
        # 测试Python版本
        echo "检查Python版本..."
        docker run --rm cu121-builder:test python3 --version
        
        # 测试CUDA工具链
        echo "检查CUDA版本..."
        docker run --rm cu121-builder:test nvcc --version
        
        # 测试脚本可执行性
        echo "检查脚本权限..."
        docker run --rm cu121-builder:test ls -la /scripts/
        
        # 测试Python包
        echo "检查关键Python包..."
        docker run --rm cu121-builder:test python3 -c "
        import sys
        print(f'Python版本: {sys.version}')
        
        packages = ['numpy', 'torch', 'cmake', 'ninja']
        for pkg in packages:
            try:
                __import__(pkg)
                print(f'✅ {pkg} 可用')
            except ImportError as e:
                print(f'❌ {pkg} 不可用: {e}')
        "
    
    - name: Test script syntax
      run: |
        echo "检查脚本语法..."
        
        # 检查bash脚本语法
        for script in scripts/*.sh; do
          echo "检查 $script..."
          docker run --rm -v $(pwd):/workspace cu121-builder:test bash -n "/workspace/$script"
        done
        
        echo "所有脚本语法检查通过!"
    
    - name: Test version listing
      run: |
        echo "测试版本列表功能..."
        docker run --rm cu121-builder:test /scripts/list_versions.sh examples
    
    - name: Test environment verification
      run: |
        echo "测试环境验证..."
        docker run --rm cu121-builder:test /scripts/verify_env.sh || echo "GPU功能在CI中不可用，这是正常的"
    
    - name: Generate test report
      run: |
        echo "生成测试报告..."
        cat > test-report.md << EOF
        # 环境测试报告
        
        **测试时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **提交SHA**: ${{ github.sha }}
        **分支**: ${{ github.ref_name }}
        
        ## 测试结果
        
        ✅ Docker镜像构建成功
        ✅ Python 3.12环境正常
        ✅ CUDA 12.1.1工具链可用
        ✅ 脚本语法检查通过
        ✅ 基础功能测试通过
        
        ## 环境信息
        
        - **基础镜像**: nvidia/cuda:12.1.1-devel-ubuntu22.04
        - **Python版本**: 3.12
        - **CUDA版本**: 12.1.1
        - **支持架构**: 8.0, 8.6, 8.9
        
        ## 注意事项
        
        - GPU功能需要在支持GPU的runner上测试
        - 实际编译测试需要在self-hosted runner上进行
        - 本测试仅验证基础环境和脚本语法
        EOF
        
        echo "测试报告已生成:"
        cat test-report.md
    
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: environment-test-report
        path: test-report.md
        retention-days: 7

  validate-workflows:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate workflow files
      run: |
        echo "验证GitHub Actions工作流语法..."
        
        # 安装act (可选，用于本地测试)
        curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash
        
        # 检查workflow文件语法
        for workflow in .github/workflows/*.yml; do
          echo "检查 $workflow..."
          # 基本YAML语法检查
          python3 -c "
        import yaml
        import sys
        
        try:
            with open('$workflow', 'r') as f:
                yaml.safe_load(f)
            print('✅ $workflow YAML语法正确')
        except yaml.YAMLError as e:
            print('❌ $workflow YAML语法错误:', e)
            sys.exit(1)
        except Exception as e:
            print('❌ $workflow 检查失败:', e)
            sys.exit(1)
        "
        done
        
        echo "所有workflow文件验证通过!"
    
    - name: Check required secrets and variables
      run: |
        echo "检查所需的secrets和变量..."
        
        cat > required-config.md << EOF
        # GitHub Actions 配置要求
        
        ## 必需的Secrets
        
        - \`GITHUB_TOKEN\` - 自动提供，用于创建releases
        
        ## 推荐的Repository Variables
        
        - \`DEFAULT_PYTORCH_VERSION\` - 默认PyTorch版本
        - \`DEFAULT_VLLM_VERSION\` - 默认vLLM版本
        - \`DEFAULT_CUDA_ARCH\` - 默认CUDA架构列表
        
        ## Runner标签配置
        
        - \`self-hosted\` - 基本标签
        - \`gpu\` - GPU支持标签 (可选)
        - \`cuda-12.1\` - CUDA版本标签 (可选)
        
        ## 仓库设置
        
        1. **Actions权限**: Settings → Actions → General
           - 启用 "Allow all actions and reusable workflows"
        
        2. **Workflow权限**: Settings → Actions → General → Workflow permissions  
           - 选择 "Read and write permissions"
           - 启用 "Allow GitHub Actions to create and approve pull requests"
        
        3. **Releases权限**: Settings → Actions → General
           - 启用 "Allow GitHub Actions to create releases"
        EOF
        
        echo "配置要求已生成:"
        cat required-config.md
    
    - name: Upload configuration guide
      uses: actions/upload-artifact@v4
      with:
        name: github-actions-config-guide
        path: required-config.md
        retention-days: 30
